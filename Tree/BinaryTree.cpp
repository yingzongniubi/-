/*
树 与 二叉树
树的每一个节点为一对多的节点形式，即，每一个节点只有唯一前驱但是可能有许多后继，并且有且只有一个根节点。且树的子树之间互不相交。
树上某一节点的孩子数量称为度。树的层次即代数，称为树的高度。只有前驱没有后继的节点，称为树的叶子节点。
树有许多内在的公式和关系，就不展开说明。
******************************************************************************************************************************************************
二叉树不是树的特殊形式，而是与树并列的关系。二叉树是一种有序树，而树是一种无序树。
二叉树的每一个节点都只有唯一前驱与数量不大于二的后继节点，并且二叉树严格规定每一节点的孩子必须指定是左孩子还是右孩子，哪怕只有一个后继，也需要说明是
左边后继还是右边后继，而树的节点直接没有这种关系，因此树与二叉树不是包含关系。
二叉树的另一特性便是，已经规定了各个节点的序列，从上至下，从左至右规定了各个位置的序列号，可以该位置没有节点，但不能忽略序列的存在。节点之间的序列关系是
很重要的、无法忽略的便是有序树。

满二叉树：每一个节点均有且必须有两个后继。
完全二叉树：对一棵具有n个节点的二叉树按层序从左到右编序，二叉树树某个节点的编序与同样位置的满二叉树节点的编序相同如果所有节点都满足这个条件，则二叉树为完全二叉树。
满二叉树一定是完全二叉树；完全二叉树不一定是满二叉树。

二叉树的遍历：先序遍历 DLR,中序遍历 LDR,后续遍历 LRD。遍历操作是最核心的操作。
二叉树的存储结构：A.顺序存储：按照二叉树的规定序列先后存储在数组中，没有节点便置0。
                B.链式存储： 每一节点的指针域中有左孩子与右孩子的指针，叫做二叉链树。

二叉树的遍历操作：A.先序递归遍历 B.中序非递归遍历（用栈来实现） C.层次遍历（用队列来实现）D.按先序递归，将空节点用 # 表示，建立二叉树 E.递归复制 二叉树
*/